colorscheme peachpuff
syntax on
set number
set ruler
set incsearch
set hlsearch
set mouse=a

set autoindent
set cindent
set smartindent
set expandtab 
set backspace=2
set shiftwidth=4
set softtabstop=4
set tabstop=4
autocmd FileType html,css,javascript,ruby,c,cpp set ts=2 sts=2 sw=2
autocmd FileType markdown,yaml,vim,sh,zsh set ts=2 sts=2 sw=2

highlight Visual ctermbg=0
" highlight Comment ctermfg=20
" highlight Directory ctermfg=20

highlight ColorColumn ctermbg=235 guibg=#2c2d27
let &colorcolumn='80,100'

highlight CursorLine cterm=bold
highlight CursorLineNR cterm=bold
set cursorline

highlight User1 ctermfg=red
highlight User2 ctermfg=yellow
highlight User3 ctermfg=green
highlight User4 ctermfg=cyan
highlight User5 ctermfg=white
set laststatus=2
set statusline=%5*üìÅ%<%{CurDir()}/ 
set statusline+=\ üìù%2*%f%m
set statusline+=%1*\ (%{&fenc}:%Y)\ %4*
set statusline+=%=\ üîé\ Ln\ %l/%L\,\ Col\ %c\ (%p%%)


map <F2> :wa<CR>:EXEC 
map <F5> gT
map <F6> gt
imap <F2> <ESC><F2>
imap <F5> <ESC><F5>
imap <F6> <ESC><F6>
command -nargs=* EXEC execute EXEC(<q-args>)


let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source ${MYVIMRC}
endif

call plug#begin('~/.vim/plugged')
call plug#end()


function! CurDir()
  let curdir = substitute(getcwd(), $HOME, '~', '')
  return curdir
endfunction

function EXEC(args)
    let cpl = ''
    if filereadable('.vimexec')
        let exc = './.vimexec % '
    elseif filereadable('makefile') || filereadable('Makefile')
        let exc = 'make'
    elseif( &ft == 'cpp')
        let cpl = 'g++ -o %:r -std=c++14 -Wall -Wextra -pedantic % && ' |
        let exc = './%:r'
    elseif( &ft == 'c')
        let cpl = 'gcc -o %:r -Wall -Wextra -pedantic % && ' |
        let exc = './%:r'
    elseif( &ft == 'java')
        let cpl = 'javac % && ' |
        let exc = 'java %:r'
    elseif( getline(1) =~ 'python3')
        let exc = 'python3 %'
    elseif( getline(1) =~ 'python2')
        let exc = 'python2 %'
    elseif( &ft == 'python')
        let exc = 'python %'
    elseif( getline(1) =~ 'bash')
        let exc = 'bash %'
    elseif( getline(1) =~ 'zsh')
        let exc = 'zsh %'
    elseif( &ft == 'sh')
        let exc = 'sh %'
    elseif( &ft == 'verilog')
        let cpl = 'iverilog % -o %:r.exe && ' |
        let exc = './%:r.exe'
    elseif( &ft == 'ruby')
        let exc = 'ruby %'
    elseif( &ft == 'tex')
        let cpl = 'pdflatex % && ' |
        let exc = ''
    else
        let exc = './%'
    endif

    if !exists('exc')
        echo 'Can''t run this filetype ...'
        return
    else
        if cpl != ''
            let cp_r = 'echo -e "\e[1;33m[Compiling] $(date)\e[0m" && ' . cpl . 'echo -e "\e[1;32m[Running] $(date)\e[0m" && time ' . exc
        else
            let cp_r = 'echo -e "\e[1;32m[Running] $(date)\e[0m" && time ' . exc
        endif
    endif

    return '!clear;' . cp_r . ' ' . a:args . '; echo -e "\e[1;31m[Terminated][$?] $(date)\e[0m\a"'
endfunction
