timer=$(date +%s%3N)

### Zinit ###
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
  print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
  command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
  command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

[ ! -f "${HOME}/.zinit/bin/zmodules/Src/zdharma/zplugin.so" ] && source "${HOME}/.zinit/bin/zinit.zsh" && zinit module build
module_path+=( "${HOME}/.zinit/bin/zmodules/Src" )
zmodload zdharma/zplugin
# zpmod source-study

source "${HOME}/.zinit/bin/zinit.zsh"
# zinit self-update
# zinit update
# zinit delete --clean


### Zinit Plugin ###
# zinit ice lucid wait='0' atinit='zpcompinit'
# zinit light zdharma/fast-syntax-highlighting
zinit ice lucid wait='0'
zinit light zsh-users/zsh-syntax-highlighting

# zinit ice lucid wait='0' atload='_zsh_autosuggest_start; zpcompinit; zpcdreplay'
zinit ice wait='0' lucid atload='_zsh_autosuggest_start'
zinit light zsh-users/zsh-autosuggestions
ZSH_AUTOSUGGEST_STRATEGY=(match_prev_cmd) # completion) # history)

zinit ice lucid wait='0'
zinit light zsh-users/zsh-completions

zinit ice wait='0' lucid
zinit snippet ~/.env/config/zcustom

# zinit light olivierverdier/zsh-git-prompt
# ZSH_THEME_GIT_PROMPT_PREFIX="🐙"
# ZSH_THEME_GIT_PROMPT_SUFFIX=""
# ZSH_THEME_GIT_PROMPT_SEPARATOR=" "
# ZSH_THEME_GIT_PROMPT_BRANCH="%{$fg_bold[magenta]%}"
# ZSH_THEME_GIT_PROMPT_STAGED="%{$fg[red]%}%{●%G%}"
# ZSH_THEME_GIT_PROMPT_CONFLICTS="%{$fg[red]%}%{✖%G%}"
# ZSH_THEME_GIT_PROMPT_CHANGED="%{$fg[blue]%}%{✚%G%}"
# ZSH_THEME_GIT_PROMPT_BEHIND="%{↓%G%}"
# ZSH_THEME_GIT_PROMPT_AHEAD="%{↑%G%}"
# ZSH_THEME_GIT_PROMPT_UNTRACKED="%{…%G%}"
# ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg_bold[green]%}%{✔%G%}"

# autoload -Uz _zinit
# (( ${+_comps} )) && _comps[zinit]=_zinit
#
# # Load a few important annexes, without Turbo
# # (this is currently required for annexes)
# zinit light-mode for \
#   zinit-zsh/z-a-rust \
#   zinit-zsh/z-a-as-monitor \
#   zinit-zsh/z-a-patch-dl \
#   zinit-zsh/z-a-bin-gem-node


### Prompt ###
setopt prompt_subst

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes false
zstyle ':vcs_info:git*' formats '%b'
zstyle ':vcs_info:git*' actionformats '%b (%a)'

function _prompt_git() {
  is_dirty() {
    test -n "$(git status --porcelain --ignore-submodules)"
  }
  ref="${vcs_info_msg_0_}"
  if [[ -n "${ref}" ]]; then
    if [[ "${ref/.../}" == "${ref}" ]]; then
      ref="🐙${ref}"
    else
      # detached
      ref="🐙${ref/.../}🔒"
    fi
    ref="%F{008}${ref}%f"
    if is_dirty; then
      ref="${ref} %F{yellow}•%f"
    else
      ref="${ref} %F{green}•%f"
    fi
    # prompt_segment ${color} ${PRIMARY_FG}
    print -Pn "${ref}"
  fi
}

export PYENV_VIRTUALENV_DISABLE_PROMPT=1
function _prompt_pyenv() {
  [[ -n ${VIRTUAL_ENV} ]] && echo "🐍%F{yellow}${VIRTUAL_ENV##*/}%f "
}

function _prompt_goenv() {
  hash goenv 2> /dev/null && [[ $(goenv global) != $(goenv version-name) ]] && echo "🐶%F{cyan}$(goenv version-name)%f "
}

function preexec() {
  timer=$(date +%s%3N)
}

function precmd() {
  vcs_info
  now=$(date +%s%3N)
  elapsed=$([ ${timer} ] && echo $((${now}-${timer})) || echo 0)
  unset timer

  ms=$((elapsed % 1000))
  s=$((elapsed / 1000 % 60))
  m=$((elapsed / 1000 / 60 % 60))
  h=$((elapsed / 1000 / 60 / 60 % 24))
  d=$((elapsed / 1000 / 60 / 60 / 24))

  exectime=""
  [[ ${d} -gt 0 ]] && exectime="${d}%F{magenta}d%f"
  [[ ${h} -gt 0 || -n ${exectime} ]] && exectime="${exectime}${h}%F{magenta}h%f"
  [[ ${m} -gt 0 || -n ${exectime} ]] && exectime="${exectime}${m}%F{magenta}m%f"
  [[ ${s} -gt 0 || -n ${exectime} ]] && exectime="${exectime}${s}%F{magenta}s%f"
  [[ -z ${exectime} ]] && exectime="${ms}%F{magenta}ms%f"

  # [[ -z ${PYENV_VIRTUALENV_INIT} ]] && hash pyenv 2> /dev/null && eval "$(pyenv virtualenv-init -)"
  hash pyenv 2> /dev/null && eval "$(pyenv virtualenv-init -)"
  PROMPT='👤%F{magenta}%n%f 💻%F{cyan}%m%f 📁%F{white}%~%f $(_prompt_git)'$'\n''$(_prompt_goenv)$(_prompt_pyenv)🐈 '
  RPROMPT='%(?.%F{green}✓.%F{red}💀%?)%f ⏳%F{white}${exectime}%f 🕑%F{yellow}%D{%H:%M:%S}%f'
  # ▓▒░ ✗
  # ⚡💎🐳🌟🏄🔥✨👀💾💡🚫❗🔄📣📚📺💨🐣🐛💬🌀🚀🐯👋🏠🔮🧪🤖
  # 🔴🟠🟡🟢🔵🟣
}


setopt SHARE_HISTORY
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# REPORTTIME=1
# TMOUT=1
# TRAPALRM() {
#   zle reset-prompt
# }


# Find exact Key code by <C-v> <key>
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[OA" up-line-or-beginning-search # Up
bindkey "^[OB" down-line-or-beginning-search # Down
bindkey "^[k" backward-word
bindkey "^[j" forward-word
bindkey "^[h" backward-char
bindkey "^[l" forward-char
bindkey "^k" up-line-or-beginning-search
bindkey "^j" down-line-or-beginning-search
bindkey '^f' forward-word
# bindkey -e

### Alias ###
alias ls="ls --color=auto --group-directories-first"
alias ssh="ssh -Y -D 0.0.0.0:800${WINDOW} "
alias cenv="docker run -it --rm -v '${PWD}:/${PWD##*/}' -w '/${PWD##*/}'"
alias kubectl="minikube kubectl --"
